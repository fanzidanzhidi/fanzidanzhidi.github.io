<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="2021/01/22/Awesome-%E7%89%A9%E8%81%94%E7%BD%91/"/>
      <url>2021/01/22/Awesome-%E7%89%A9%E8%81%94%E7%BD%91/</url>
      
        <content type="html"><![CDATA[<h1 id="Awesome-物联网"><a href="#Awesome-物联网" class="headerlink" title="Awesome-物联网"></a>Awesome-物联网</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2021/01/22/%E5%B5%8C%E5%85%A5%E5%BC%8F%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%9D%A2%E8%AF%95%E9%A2%98%E6%B1%87%E6%80%BB/"/>
      <url>2021/01/22/%E5%B5%8C%E5%85%A5%E5%BC%8F%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%9D%A2%E8%AF%95%E9%A2%98%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="嵌入式软件工程师常问问题汇总（持续更新）"><a href="#嵌入式软件工程师常问问题汇总（持续更新）" class="headerlink" title="嵌入式软件工程师常问问题汇总（持续更新）"></a>嵌入式软件工程师常问问题汇总（持续更新）</h2><ol><li><p><strong>介绍一下 MQTT/HTTP/Coap 原理</strong></p></li><li><p><strong>最小模式单片机除CPU外包含哪些部分？</strong></p></li><li><p><strong>嵌入式领域如何实现低功耗？</strong></p></li><li><p><strong>LoRa 与 NB-IoT最大的区别</strong></p></li><li><p><strong>LoRa 通信的过程是怎样的？</strong></p></li><li><p><strong>STM32 实现示波器、信号源的工作原理是怎样的？</strong></p></li><li><p><strong>LabView 常见工作流程</strong></p></li><li><p><strong>看懂电路！！！！！！</strong></p></li><li><p><strong>OSI模型是什么，能具体说说每一层对应什么？</strong></p></li><li><p><strong>能深入聊聊RTOS、物联网操作系统吗</strong></p></li><li><p><strong>GPIO、I2C、I2S 原理</strong></p></li></ol><ol><li><p><strong>介绍一下 MQTT/HTTP/Coap 原理</strong></p><p>MQTT（Message Queuing Telemetry Transport，消息队列遥测传输协议），是一种基于<code>发布/订阅</code>（<code>publish/subscribe</code>）模式的“轻量级”通讯协议，该协议构建于TCP/IP协议上，由IBM在1999年发布。MQTT最大优点在于，可以以极少的代码和有限的带宽，为连接远程设备提供实时可靠的消息服务。做为一种低开销、低带宽占用的即时通讯协议，使其在物联网、小型设备、移动应用等方面有较广泛的应用。</p><p>原理记得参考源码理解。</p><p><a href="https://www.cnblogs.com/xueweisuoyong/p/11196493.html">https://www.cnblogs.com/xueweisuoyong/p/11196493.html</a></p><p><a href="https://www.runoob.com/w3cnote/mqtt-intro.html">https://www.runoob.com/w3cnote/mqtt-intro.html</a></p><h3 id="1-MQTT协议特点"><a href="#1-MQTT协议特点" class="headerlink" title="1. MQTT协议特点"></a>1. <code>MQTT</code>协议特点</h3><p>MQTT是一个基于<strong>客户端-服务器</strong>的消息发布/订阅传输协议。MQTT协议是轻量、简单、开放和易于实现的，这些特点使它适用范围非常广泛。在很多情况下，包括受限的环境中，如：机器与机器（M2M）通信和物联网（IoT）。其在，通过卫星链路通信传感器、偶尔拨号的医疗设备、智能家居、及一些小型化设备中已广泛使用。</p><p>MQTT协议当前版本为，2014年发布的<a href="http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html">MQTT v3.1.1</a>。除标准版外，还有一个简化版<code>MQTT-SN</code>，该协议主要针对嵌入式设备，这些设备一般工作于百TCP/IP网络，如：ZigBee。</p><p>MQTT协议运行在<a href="http://itbilu.com/nodejs/core/VkcdcFq9.html#OSI">TCP/IP</a>或其他网络协议，提供有序、无损、双向连接。其特点包括：</p><ol><li><p>使用的发布/订阅消息模式，它提供了一对多消息分发，以实现与应用程序的解耦。</p></li><li><p>对负载内容屏蔽的消息传输机制。</p></li><li><p>对传输消息有三种服务质量（QoS）：</p></li><li><ul><li><code>最多一次</code>，这一级别会发生消息丢失或重复，消息发布依赖于底层TCP/IP网络。即：&lt;=1</li><li><code>至多一次</code>，这一级别会确保消息到达，但消息可能会重复。即：&gt;=1</li><li><code>只有一次</code>，确保消息只有一次到达。即：＝1。在一些要求比较严格的计费系统中，可以使用此级别</li></ul></li><li><p>数据传输和协议交换的最小化（协议头部只有2字节），以减少网络流量</p></li><li><p>通知机制，异常中断时通知传输双方</p></li></ol></li></ol><h3 id="2-MQTT协议原理"><a href="#2-MQTT协议原理" class="headerlink" title="2. MQTT协议原理"></a>2. <code>MQTT</code>协议原理</h3><h4 id="2-1-MQTT协议实现方式"><a href="#2-1-MQTT协议实现方式" class="headerlink" title="2.1 MQTT协议实现方式"></a>2.1 <code>MQTT</code>协议实现方式</h4><p>   <img src="https://itbilu.com/upload/2016/1/9/14523188625918865.png" alt="img"></p><ul><li><p>实现<code>MQTT</code>协议需要：<code>客户端</code>和<code>服务器端</code></p></li><li><p><code>MQTT</code>协议中有三种身份：<code>发布者（Publish）</code>、<code>代理（Broker）</code>（服务器）、<code>订阅者（Subscribe）</code>。其中，消息的<code>发布者</code>和<code>订阅者</code>都是客户端，消息<code>代理</code>是服务器，消息<code>发布者</code>可以同时是<code>订阅者</code>。</p></li><li><pre><code>MQTT</code></pre><p>传输的消息分为：</p><pre><code>主题（Topic）</code></pre><p>和</p><pre><code>负载（payload）</code></pre><p>两部分</p><ul><li><code>Topic</code>，可以理解为消息的类型，<code>订阅者</code>订阅（Subscribe）后，就会收到该主题的消息内容（<code>payload</code>）</li><li><code>payload</code>，可以理解为消息的内容，是指<code>订阅者</code>具体要使用的内容</li></ul></li></ul><h4 id="2-2-网络传输与应用消息"><a href="#2-2-网络传输与应用消息" class="headerlink" title="2.2 网络传输与应用消息"></a>2.2 网络传输与应用消息</h4><p>   <code>MQTT</code>会构建底层网络传输：它将建立客户端到服务器的连接，提供两者之间的一个有序的、无损的、基于字节流的双向传输。</p><p>   当应用数据通过<code>MQTT</code>网络发送时，<code>MQTT</code>会把与之相关的服务质量（QoS）和主题名（Topic）相关连。</p><h4 id="2-3-MQTT客户端"><a href="#2-3-MQTT客户端" class="headerlink" title="2.3 MQTT客户端"></a>2.3 <code>MQTT</code>客户端</h4><p>   一个使用<code>MQTT</code>协议的应用程序或者设备，它总是建立到服务器的网络连接。客户端可以：</p><ul><li>发布其他客户端可能会订阅的信息</li><li>订阅其它客户端发布的消息</li><li>退订或删除应用程序的消息</li><li>断开与服务器连接</li></ul><h4 id="2-4-MQTT服务器"><a href="#2-4-MQTT服务器" class="headerlink" title="2.4 MQTT服务器"></a>2.4 <code>MQTT</code>服务器</h4><p>   <code>MQTT</code>服务器以称为“消息代理”（Broker），可以是一个应用程序或一台设备。它是位于消息<code>发布者</code>和<code>订阅者</code>之间，它可以：</p><ul><li>接受来自客户的网络连接</li><li>接受客户发布的应用信息</li><li>处理来自客户端的订阅和退订请求</li><li>向订阅的客户转发应用程序消息</li></ul><h4 id="2-5-MQTT协议中的订阅、主题、会话"><a href="#2-5-MQTT协议中的订阅、主题、会话" class="headerlink" title="2.5 MQTT协议中的订阅、主题、会话"></a>2.5 <code>MQTT</code>协议中的订阅、主题、会话</h4><p>   <strong>订阅（Subscription）</strong></p><p>   订阅包含主题筛选器（Topic Filter）和最大服务质量（QoS）。订阅会与一个会话（Session）关联。一个会话可以包含多个订阅。每一个会话中的每个订阅都有一个不同的主题筛选器。</p><p>   <strong>会话（Session）</strong></p><p>   每个客户端与服务器建立连接后就是一个会话，客户端和服务器之间有状态交互。会话存在于一个网络之间，也可能在客户端和服务器之间跨越多个连续的网络连接。</p><p>   <strong>主题名（Topic Name）</strong></p><p>   连接到一个应用程序消息的标签，该标签与服务器的订阅相匹配。服务器会将消息发送给订阅所匹配标签的每个客户端。</p><p>   <strong>主题筛选器（Topic Filter）</strong></p><p>   一个对主题名通配符筛选器，在订阅表达式中使用，表示订阅所匹配到的多个主题。</p><p>   <strong>负载（Payload）</strong></p><p>   消息订阅者所具体接收的内容</p><h4 id="2-6-MQTT协议中的方法"><a href="#2-6-MQTT协议中的方法" class="headerlink" title="2.6 MQTT协议中的方法"></a>2.6 <code>MQTT</code>协议中的方法</h4><p>   <code>MQTT</code>协议中定义了一些方法（也被称为动作）， 来于表示对确定资源所进行操作。 这个资源可以代表预先存在的数据或动态生成数据，这取决于服务器的实现。通常来说，资源指服务器上的文件或输出。</p><p>   <strong>Connect</strong>，等待与服务器建立连接</p><p>   <strong>Disconnect</strong>，等待<code>MQTT</code>客户端完成所做的工作，并与服务器断开TCP/IP会话</p><p>   <strong>Subscribe</strong>，等待完成订阅</p><p>   <strong>UnSubscribe</strong>，等待服务器取消客户端的一个或多个<code>topics</code>订阅</p><p>   <strong>Publish</strong>，<code>MQTT</code>客户端发送消息请求，发送完成后返回应用程序线程</p><ol start="2"><li><p><strong>最小模式单片机除CPU外包含哪些部分？</strong></p><p>晶振电路、复位电路</p></li><li><p><strong>嵌入式领域如何实现低功耗？</strong></p><p>休眠模式的设定</p></li><li><p><strong>LoRa 与 NB-IoT最大的区别</strong></p><p>NB-IoT 使用运营商提供的 1GHz 以下的授权频段</p><p>LoRa 工作在 1GHz以下的非授权频段</p></li><li><p><strong>LoRa 通信的过程是怎样的？</strong></p></li><li><p><strong>STM32 实现示波器、信号源的工作原理是怎样的？频率、电流电压参数是？</strong></p><p>系统硬件设计根据系统的功能需求 ，系统结构图如图 1所示，主要包括 ：信号输入接 口模块 、信号调理模块、数据采集及缓存模块、USB2．0通信模块等 ］。工作流程如下 ：系统通过 USB接 口接到主机上后获得 5V 电源，微控制器 STM32对硬件设备进行初始化，并通过内部 USB硬件控制器来完成 USB设备的枚举工作。A／D转换器是通过定时器来触发采样的，以保证其 以恒定 的时间 间隔对模 拟信号进行模 数转换 ，在完成规定长度的采集工作之后 ，将数据存入高速数据存储器中（RAM）。在规定的触发条件满足时，数据采集系统中的控制电路使能 DMA通道 ，将 A／D所 采集 的数据 传输 至 USB的缓 冲 区 中，由 USB接 口电路将这些数据传输给上位机。</p><p><img src="http://www.elecfans.com/uploads/allimg/170411/2474215-1F411113P6200.png" alt="基于STM32的虚拟示波器的设计与实现"></p><p>信号输入及调理模块主要完成信号衰减 ，程控放大，叠加直流分量。衰减电路是为了保证在较大的信号输入时，能够在 A／D采样 的范围之内，避免 回显时造成信号的失真或是损坏元器件。程控放大电路是将待测的小信号进行放大，曲模拟开关 CD4051、运放 NE5532和可变电阻器构成 ，并通过 MCU切换放大倍数，电路如 图 2所示 。数 据采集 及缓存 模块 和 USB2．0通信模块是 由微控制器 STM32F103x独 自实现的。由于 MCU内部 自带的 A／D无法对负电压进行采集，而待测信号往往又带有负压，这时需要电路将负压抬高到 0电平以上，如图 3所示。                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                </p></li><li><p><strong>LabView 常见工作流程</strong></p></li><li><p><strong>看懂电路！！！！！！</strong></p></li><li><p><strong>OSI模型是什么，能具体说说每一层对应什么？</strong></p></li></ol><ul><li><p>OSI: open system interconnection 开放式系统互联参考模型</p></li><li><p>OSI 和TCP/IP 的对应关系和协议</p><p><img src="https://pic1.zhimg.com/80/v2-2d62ba265be486cb94ab531912aa3b9c_1440w.jpg" alt="img"></p><p>OSI模型各层的基本作用</p><p><img src="https://pic2.zhimg.com/80/v2-436927a69a3574532059a78623d3095d_1440w.jpg" alt="img"></p></li><li><p>OSI模型的详解（但是对会话层、表示层、应用层合并为TCP/IP的应用层）</p></li><li><p>大纲</p><p><img src="https://pic4.zhimg.com/80/v2-5ce0438c1e2c59840286b124fc70dd67_1440w.jpg" alt="img"></p></li></ul><ul><li><p>物理层</p><p><img src="https://pic1.zhimg.com/80/v2-343093645638ea0839b71db5eba1f7c0_1440w.jpg" alt="img"></p></li><li><p>数据链路层</p><p><img src="https://pic1.zhimg.com/80/v2-fb8534d86e40986e43449de6c35ebd14_1440w.jpg" alt="img"></p></li><li><p>网络层</p><p><img src="https://pic4.zhimg.com/80/v2-991572825990575d273f653a78bcc5e7_1440w.jpg" alt="img"></p></li><li><p>传输层</p><p><img src="https://pic2.zhimg.com/80/v2-31bff54e0720487afe37e5f3f282d231_1440w.jpg" alt="img"></p></li><li><p>应用层</p><p><img src="https://pic2.zhimg.com/80/v2-741e4cd7f95897d6a61bd219e208f1c1_1440w.jpg" alt="img"></p></li><li><p>以下为补充内容，可以帮助理解</p></li></ul><ul><li><p>pc连网的设置详解</p><p><img src="https://pic4.zhimg.com/80/v2-b09a3718e0501f053b6ed418b087211b_1440w.jpg" alt="img"></p></li><li><p>数据链路层数据包（以太网数据包）格式，除了应用层没有头部，其他都有</p><p><img src="https://pic2.zhimg.com/80/v2-3c8ab7e3f330238821adedea31b9c321_1440w.jpg" alt="img"></p></li><li><p>由于以太网数据包的数据部分，最大长度为1500字节，当IP包过大时，会分割下来，但是每个分割包的头部都一样</p><p><img src="https://pic1.zhimg.com/80/v2-5ce2810c5f0ed99ad92d7d3a43cc652c_1440w.jpg" alt="img"></p><p>数据包在传送时的封装和解封装如下所示</p><p><img src="https://pic3.zhimg.com/80/v2-80430dbb37a1e42315a77e30448b34b2_1440w.jpg" alt="img"></p></li></ul><ol start="10"><li><p><strong>能深入聊聊RTOS、物联网操作系统吗</strong></p></li><li><p><strong>GPIO、I2C、I2S 原理</strong></p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2021/01/22/Linux%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/Ubuntu%E5%A5%BD%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%88%86%E4%BA%AB/"/>
      <url>2021/01/22/Linux%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/Ubuntu%E5%A5%BD%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%88%86%E4%BA%AB/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2021/01/22/AwesomeIoT/"/>
      <url>2021/01/22/AwesomeIoT/</url>
      
        <content type="html"><![CDATA[<h3 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h3><ul><li><p><a href="https://www.arduino.cc/">Arduino</a> -Arduino是一个基于易于使用的硬件和软件的开源电子平台。适用于进行交互式项目的任何人。</p></li><li><p><a href="http://beagleboard.org/">BeagleBoard</a> -BeagleBoard是德州仪器与Digi-Key和Newark element14联合生产的一种低功耗开源硬件单板计算机。</p></li><li><p><a href="https://developer.qualcomm.com/hardware/dragonboard-410c">Dragonboard</a> -ArrowBoard 410c是Arrow Electronics的产品，是基于中层Qualcomm®Snapdrago硬件</p></li><li><p><a href="https://www.espressif.com/en/products/hardware/esp32/overview">ESP32</a> -ESP32，ESP8266的后继产品。ESP32具有强大的硬件功能。高速双核处理器以及众多内置外设将取代连接产品中的微控制器。</p></li><li><p><a href="https://www.solid-run.com/freescale-imx6-family/hummingboard/">HummingBoard</a> -HummingBoard是三个基于Linux和Android的开源SBC系列，它们基于1GHz Freescale i.MX6 SoC，具有类似Pi的26针I / O连接器。</p></li><li><p><a href="https://www-ssl.intel.com/content/www/us/en/do-it-yourself/galileo-maker-quark-board.html">英特尔Galileo-</a>英特尔®Galileo第2代板是基于英特尔®架构的Arduino *认证的开发和原型开发板系列中的第一个，专门为制造商，学生，教育工作者和DIY电子发烧友而设计。</p></li><li><p><a href="https://www.microduino.cc/">Microduino</a> -Microduino和mCookie为各个年龄段的制造商，设计师，工程师，学生和好奇的修补匠带来了功能强大的小型可堆叠电子硬件。建立开源项目或创建创新的新项目。</p></li><li><p><a href="http://www.nodemcu.com/index_en.html">Node MCU（ESP 8266）</a> -NodeMCU是一个开源物联网平台。它使用Lua脚本语言。它基于eLua项目，并基于ESP8266 SDK 0.9.5构建。</p></li><li><p><a href="https://www.olimex.com/Products/OLinuXino/open-source-hardware">OLinuXino</a> -OLinuXino是一款低成本（EUR 30）的开源软件和开源硬件Linux工业级单板计算机，其GPIO可在-25°C至+ 85°C的温度范围内运行。</p></li><li><p><a href="http://www.hardkernel.com/">Odroid</a> -ODROID表示Open + Droid。它是用于硬件和软件的开发平台。</p></li><li><p><a href="https://www.particle.io/">粒子</a>-一套硬件和软件工具，可帮助您原型设计，扩展和管理物联网产品。</p></li><li><p><a href="https://www.open-electronics.org/pinoccio-wifi-mesh-networking-for-arduino-and-iot-available-now/">Pinoccio</a> -Pinoccio是为所有you IoT设备添加网状网络功能和WiFi互联网访问的解决方案，并且它与Arduino兼容。</p></li><li><p><a href="https://www.raspberrypi.org/">Raspberry Pi</a> -Raspberry Pi是一款低成本的信用卡大小的计算机，可插入计算机显示器或电视，并使用标准的键盘和鼠标。它具有处理台式计算机所需的一切功能，从浏览Internet和播放高清视频到制作电子表格，文字处理和玩游戏。</p></li><li><p><a href="https://tessel.io/">Tessel</a> -Tessel是一个完全开源且由社区驱动的物联网和机器人技术开发平台。它包括开发板，硬件模块附加组件以及在其上运行的软件。</p></li><li><p><a href="http://www.udoo.org/">UDOO</a> -UDOO是具有集成的Arduino 2兼容微控制器的单板计算机，专为计算机科学教育，<a href="http://www.udoo.org/">创</a>客世界和物联网而设计。</p></li></ul><h3 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h3><h4 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h4><ul><li><a href="https://mynewt.apache.org/">Apache Mynewt</a> -Apache Mynewt是一个实时的模块化操作系统，用于需要在电源，内存和存储约束下长时间运行的已连接IoT设备。提供的第一个连接堆栈是BLE 4.2。</li><li><a href="http://www.mbed.com/">ARM mbed</a> -ARM®mbed™物联网设备平台提供了操作系统，云服务，工具和开发人员生态系统，可大规模创建和部署基于标准的商业物联网解决方案。</li><li><a href="http://www.contiki-os.org/">Contiki</a> -Contiki是用于物联网的开源操作系统。Contiki将纤巧的低成本，低功耗微控制器连接到Internet。</li><li><a href="http://www.freertos.org/">FreeRTOS</a> -FreeRTOS是一种流行的嵌入式设备实时操作系统内核，已移植到35个微控制器上。</li><li><a href="https://developer.android.com/things/">Android Things</a> -Android Things将Android平台扩展到了您所有连接的设备，因此易于安装，并且彼此之间以及与您的智能手机无缝地协同工作。</li><li><a href="https://openwrt.org/">OpenWrt</a> -OpenWrt是基于Linux内核的操作系统（特别是嵌入式操作系统），主要用于嵌入式设备上以路由网络流量。主要组件是Linux内核，util-linux，uClibc或musl和BusyBox。所有组件均已针对大小进行了优化，以使其足够小以适合家用路由器中有限的存储和内存。</li><li><a href="https://wiki.ubuntu.com/Snappy">Snappy Ubuntu</a> -Snappy Ubuntu Core是具有事务更新的Ubuntu的新版本。它提供的最小服务器映像具有与当今的Ubuntu相同的库，但是通过更简单的机制提供了应用程序。</li><li><a href="http://node-os.com/">NodeOS</a> -NodeOS是完全用Java编写的操作系统，由Linux内核之上的npm管理。</li><li><a href="https://raspbian.org/">Raspbian</a> -Raspbian是基于Debian的免费操作系统，针对Raspberry Pi硬件进行了优化。</li><li><a href="http://www.riot-os.org/">RIOT-</a>物联网的友好操作系统。</li><li><a href="https://github.com/tinyos/tinyos-main">微小的OS</a> - TinyOS是一个开源的，BSD许可操作系统设计用于低功率无线设备，诸如那些在传感器网络中，无处不在的计算，个人区域网络，智能建筑，和智能仪表使用。</li><li><a href="https://ubos.net/">UBOS</a> -UBOS是一个Linux发行版，致力于简化运行Web应用程序的家庭服务器和独立IoT设备的系统管理。它是Arch Linux的派生产品，可在PC，Raspberry Pi，ESPRESSObin和云上运行。</li><li><a href="https://dev.windows.com/en-us/iot">Windows 10 IoT核心版</a>-Windows 10 IoT是Windows 10版本的系列，适用于各种智能设备，从小型工业网关到大型更复杂的设备（如销售点终端和ATM）。</li><li><a href="https://www.zephyrproject.org/">Zephyr项目</a>-Zephyr™项目是可扩展的实时操作系统（RTOS），支持多种硬件体系结构，针对资源受限的设备进行了优化，并且在设计时考虑了安全性。</li></ul><h4 id="编程语言"><a href="#编程语言" class="headerlink" title="编程语言"></a>编程语言</h4><blockquote><p>本节将重新组合与嵌入式开发相关的各种出色编程语言，无论是编译，解释还是DSL。</p></blockquote><ul><li><a href="https://en.wikipedia.org/wiki/C_(programming_language)">C-</a>一种通用的命令式计算机编程语言，支持结构化编程，词法变量范围和递归，而静态类型系统可防止许多意外操作。</li><li><a href="https://en.wikipedia.org/wiki/C%2B%2B">C ++</a> -通用编程语言。它具有命令性，面向对象和通用编程功能，同时还提供了用于低级内存操作的功能。</li><li><a href="http://www.groovy-lang.org/">Groovy</a> -Groovy是一种功能强大的，可选的类型化和动态语言，具有静态键入和静态编译功能，该Java平台旨在通过简洁，熟悉且易于学习的语法来提高开发人员的生产力。SmartThings开发环境使用它来创建智能应用程序。</li><li><a href="http://www.lua.org/">Lua</a> -Lua是一种功能强大，快速，轻巧，可嵌入的脚本语言。Lua是动态类型的，可通过解释基于寄存器的虚拟机的字节码来运行，并具有带有增量垃圾回收的自动内存管理功能，因此非常适合配置，脚本编写和快速原型制作。</li><li><a href="http://www.eluaproject.net/">eLua</a> -eLua代表嵌入式Lua，该项目为嵌入式世界提供了Lua编程语言的完整实现，并通过其特定功能进行了扩展，从而实现了高效且可移植的软件嵌入式开发。</li><li><a href="http://c3d.github.io/elfe/">ELFE</a> -ELFE是一种非常简单的小型编程语言。虽然它是一种通用的编程语言，但经过专门调整以方便对诸如传感器或执行器之类的小型设备进行配置和控制。</li><li><a href="https://docs.micropython.org/">MicroPython-</a>适用于微控制器和受限系统的精简高效的Python实现</li><li><a href="https://github.com/pharo-iot/PharoThings">PharoThings-</a>基于<a href="https://pharo.org/">Pharo</a>（纯的面向对象编程语言和强大的环境，专注于简单性和即时反馈）的物联网项目实时编程平台。</li><li><a href="https://tinygo.org/">TinyGo</a> -TinyGo是一个通过创建基于LLVM的新编译器将Go编程语言引入微控制器和现代Web浏览器的项目。您可以在许多不同的微控制器板上编译和运行TinyGo程序，例如BBC micro：bit和Arduino Uno。</li></ul><h4 id="构架"><a href="#构架" class="headerlink" title="构架"></a>构架</h4><ul><li><a href="https://openconnectivity.org/developer/reference-implementation/alljoyn">AllJoyn</a> -AllJoyn是一个开源软件框架，可让设备和应用轻松发现并相互通信。</li><li><a href="https://developer.apple.com/homekit/">Apple HomeKit</a> -HomeKit是用于与用户家中的连接附件进行通信和控制的框架。</li><li><a href="https://github.com/astarte-platform/astarte">Astarte</a> -Astarte是用Elixir编写的开源物联网平台。它是一个交钥匙解决方案，囊括了将设备群连接到一组远程应用程序所需的一切。它执行数据建模，自动数据缩减，实时事件，并为您提供现代物联网平台中可能期望的任何功能。目前，使用提供的SDK即可立即支持Linux和ESP32设备。</li><li><a href="http://www.blynk.cc/">Blynk</a> -Blynk是一个用于为连接的事物创建iOS和Android应用程序的平台。您只需拖放小部件（就在智能手机上），即可轻松为所有项目构建图形界面。支持以太网，WiFi，蓝牙，GSM / GPRS，USB /串行连接以及来自Arduino，Raspberry，ARM mbed，Particle，RedBear等的各种原型平台。</li><li><a href="http://github.com/countly/countly-server">Countly IoT Analytics</a> -Countly是用于移动和IoT设备的通用分析平台，可以作为开源使用。</li><li><a href="https://eclipse.org/smarthome/">Eclipse Smarthome</a> -Eclipse SmartHome框架旨在在嵌入式设备上运行，例如Raspberry Pi，BeagleBone Black或Intel Edison。它需要Java 7兼容的JVM和OSGi（4.2+）框架，例如Eclipse Equinox。</li><li><a href="http://www.freedomotic.com/">Freedomotic</a> -Freedomotic是一个开源，灵活，安全的物联网（IoT）开发框架，可用于构建和管理现代智能空间。它针对个人（家庭自动化）和商业用户（智能零售环境，环境感知营销，监控和分析等）。它使用Java编写，可以与众所周知的标准建筑自动化协议以及“自己动手”解决方案进行交互。</li><li><a href="https://iotivity.org/">Iotivity</a> -IoTivity是一个开源软件框架，支持无缝的设备到设备连接以解决物联网的新兴需求。</li><li><a href="https://eclipse.org/kura/">Kura</a> -Kura旨在为服务网关中运行的M2M应用程序提供基于Java / OSGi的容器。Kura为M2M应用程序所需的最常见服务提供或汇总开源实现。</li><li><a href="http://www.lelylan.com/">Lelylan</a> -Lelylan是基于轻量级微服务架构的物联网云平台。Lelylan平台与硬件无关，也与平台无关。这意味着您可以连接从ESP8266到最专业的嵌入式硬件解决方案的任何硬件，以及介于两者之间的所有内容-它可以在任何公共云，您自己的私有数据中心甚至混合环境中运行，无论是虚拟环境还是裸机环境。</li><li><a href="https://wiki.eclipse.org/Mihini">Mihini</a> - <a href="https://wiki.eclipse.org/Mihini">Mihini</a>的主要目标是提供运行在Linux之上的嵌入式运行时，该运行时公开了用于构建M2M应用程序的高级API。Mihini的目的是通过促进对M2M系统的I / O的访问，提供通信层等，来实现简单且可移植的开发。</li><li><a href="http://www.openhab.org/">OpenHAB</a> -openHAB运行时是在OSGi框架（Equinox）上部署的一组OSGi捆绑软件。因此，它是纯Java解决方案，并且需要JVM才能运行。它基于OSGi，提供了高度模块化的体系结构，甚至允许在运行时添加和删除功能而无需停止服务。</li><li><a href="http://gobot.io/">Gobot</a> -Gobot是使用Go编程语言编写的用于机器人技术，物理计算和物联网的框架。</li><li><a href="https://github.com/home-assistant/home-assistant">Home Assistant</a> -Home Assistant是运行在Python 3上的家庭自动化平台。HomeAssistant的目标是能够在家中跟踪和控制所有设备，并提供用于自动化控制的平台。</li><li><a href="http://lwmqn.github.io/">轻量级MQTT机器网络</a>-LWMQN是一个开源项目，遵循OMA LWM2M v1.0规范的一部分，并使用基于IP的智能对象模型来满足机器网络管理的最低要求。它提供了服务器端和机器端库，从而使JavaScript和Node.js的全栈IoT开发成为可能。另请参阅：IPSO联盟<a href="http://www.ipso-alliance.org/ipso-community/resources/technical-archive/">技术档案</a>。</li><li><a href="https://github.com/thingsboard/thingsboard-gateway">Thingsboard IoT网关</a>-开源IoT网关-使用OPC-UA和MQTT协议将连接到旧式和第三方系统的设备与Thingsboard IoT Platform集成在一起。</li><li><a href="https://pimatic.org/">Pimatic</a> -Pimatic是运行在node.js上的家庭自动化框架。它为家庭控制和自动化任务提供了一个通用的可扩展平台。</li><li><a href="https://iota.org/">IOTA-</a>物联网的开源分布式分类帐协议。使用有向无环图（DAG）代替区块链。</li><li><a href="https://github.com/mycontroller-org/mycontroller">MyController-</a>开源控制器。MyController.org是适用于家庭，办公室或任何地方的物联网自动化控制器。</li><li><a href="https://iot.mozilla.org/">Mozilla WebThings-</a>一个用于通过Web监视和控制设备的开放平台。</li></ul><h4 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h4><ul><li><a href="https://corlysis.com/">Corlysis</a> -Corlysis是一个平台，可以帮助您存储和可视化时间序列数据。它基于SpaceX也使用的开源项目Grafana和InfluxDB。</li><li><a href="https://ifttt.com/">IFTTT</a> -IFTTT是一项基于Web的服务，允许用户创建简单的条件语句链，称为“食谱”，这些条件语句是基于对其他Web服务（例如Gmail，Facebook，Instagram和Pinterest）的更改而触发的。IFTTT是“ If This Then That”的缩写（发音为“ gift”，没有“ g”）。</li><li><a href="https://www.opc-router.com/opc-router-details/">OPC路由器</a>-带有各种插件的IoT网关（OPC UA，Mqtt，SQL，REST，SAP，InfluxDB，打印机等）</li><li><a href="https://github.com/cantino/huginn">Huginn</a> -Huginn是一个用于构建代理的系统，该代理可以在线为您执行自动化任务。</li><li><a href="http://www.kaaproject.org/">Kaa-</a>一个用于快速创建IoT解决方案的开源中间件平台。</li><li><a href="https://losant.com/">Losant</a> -Losant是一个易于使用且功能强大的开发人员平台，旨在帮助您快速安全地构建复杂的连接解决方案。Losant使用REST和MQTT等开放式通信标准来提供从一台到数百万台设备的连接。Losant提供了强大的数据收集，聚合和可视化功能，以帮助理解和量化大量传感器数据。Losant的拖放式工作流编辑器使您无需编程即可触发动作，通知和机器对机器的通信。</li><li><a href="https://microservicebus.com/">MicroServiceBus.com-MicroServiceBus.com</a>是适用于Azure，AWS和IBM IoT中心的设备管理平台，与GitHub，ServiceNow，Cisco Jasper等集成。它带有免费（有限）版本以及企业产品。</li><li><a href="http://www.dreamfactory.com/">DreamFactory</a> -DreamFactory是针对移动，Web和IoT应用程序的免费开源REST API平台。</li><li><a href="https://www.hivemq.com/">HiveMQ-</a>可用于企业的MQTT代理，可以扩展以连接数百万个IoT设备。</li><li><a href="https://i1820.github.io/">I1820</a> -I1820是一个免费的开源平台，它基于MQTT提供发现，数据收集和配置服务。I1820实现了用于控制事物的REST API，并将所有收集的数据存储在名为InfluxDB的时间序列数据库中。</li><li><a href="https://iostash.io/">IOStash</a> -IOStash是一个高性能的物联网平台，对于DIY开发人员和非营利性应用程序免费。它具有多种连接选项，可以轻松开发M2M或M2A应用程序。IOStash提供了Nodejs和Android库，可轻松创建应用程序。</li><li><a href="https://thingsboard.io/">Thingsboard-</a>一个开源物联网平台。物联网解决方案的设备管理，数据收集，处理和可视化。</li><li><a href="https://github.com/erlio/vernemq">VerneMQ</a> -VerneMQ是一种高性能的分布式MQTT代理，可连接IoT，M2M，移动和Web应用程序。它可以在商品硬件上水平和垂直扩展，以支持大量并发的发布者和使用者，同时保持较低的延迟和容错能力。</li><li><a href="https://github.com/kuzzleio/kuzzle">Kuzzle-</a>具有高级功能的开源后端，例如实时发布/订阅或地理围栏，以及支持MQTT，LoRaWAN等的多协议接口。（<a href="https://kuzzle.io/solutions/technologies/iot-backend/">网站</a>）</li><li><a href="https://www.devicepilot.com/">DevicePilot-</a>连接设备（包括永久免费层）的运行分析。</li><li><a href="https://github.com/emqx/emqx">EMQ X</a> -5G时代中用于IoT的可扩展且可靠的实时MQTT消息引擎。</li><li><a href="https://waterstream.io/">Waterstream</a> -MQTT经纪人利用Apache Kafka作为其自己的存储和分发引擎。</li></ul><h4 id="库和工具"><a href="#库和工具" class="headerlink" title="库和工具"></a>库和工具</h4><ul><li><a href="http://cylonjs.com/">Cylon.js</a> -Cylon.js是一个JavaScript框架，用于机器人技术，物理计算和物联网。它使指挥机器人和设备变得异常容易。</li><li><a href="https://luvit.io/">Luvit</a> -Luvit实现与Node.js相同的API，但是在Lua中！虽然这个框架是没有直接参与物联网的发展，它仍然是一个<em>伟大</em>的方式来快速构建功能强大，高效存储，嵌入式Web应用程序。</li><li><a href="http://johnny-five.io/">Johnny-Five</a> -Johnny-Five是原始的JavaScript Robotics编程框架。Johnny-Five由Bocoup于2012年发布，由一群热情的软件开发人员和硬件工程师共同维护。</li><li><a href="http://pi4j.com/">Pi4J</a> -Pi4j旨在为Java程序员提供友好的面向对象的I / O API和实现库，以访问Raspberry Pi平台的完整I / O功能。</li><li><a href="http://wiringpi.com/">WiringPi</a> -WiringPi是用R语言编写的GPIO访问库，用于Raspberry Pi中使用的BCM2835。</li><li><a href="http://nodered.org/">Node-RED-</a>用于连接物联网的可视化工具。</li><li><a href="https://www.gambitcomm.com/site/iot_simulator.php">MIMIC IoT Simulator-</a>基于MQTT，CoAP，REST模拟大型IoT环境以进行IoT应用的敏捷开发/测试/概念验证/培训</li><li><a href="https://thomasnordquist.github.io/MQTT-Explorer/">MQTT Explorer-</a>用于在主题层次结构中可视化您的MQTT主题的工具，MQTT瑞士军刀。</li><li><a href="https://ops.city/">ops-</a>一个免费的开源工具，用于将Linux应用程序作为unikernel构建，运行和部署。</li><li><a href="https://github.com/PeterEB/smartobject">SmartObject-</a>一种智能对象类，可帮助您在JavaScript应用程序中创建IPSO智能对象。另请参阅：IPSO联盟<a href="http://www.ipso-alliance.org/ipso-community/resources/technical-archive/">技术档案</a>。</li></ul><h4 id="杂"><a href="#杂" class="headerlink" title="杂"></a>杂</h4><ul><li><a href="https://fresh.amazon.com/dash/">Amazon Dash</a> -Amazon Dash Button是连接到Wi-Fi的设备，只需按一下按钮即可对您喜欢的物品进行重新排序。</li><li><a href="http://freeboard.io/">Freeboard-</a>实时交互式仪表板和可视化创建器，实现了直观的拖放界面。</li><li><a href="http://nebula.readthedocs.io/">星云</a>-泊坞窗配器设计用于管理物联网设备。</li><li><a href="https://gladysassistant.com/">Gladys</a> -Gladys是一个在Raspberry Pi上运行并集成到整个家庭网络系统中的开源程序。</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2021/01/22/esp%E7%9B%B8%E5%85%B3%E7%9A%84%E5%AD%A6%E4%B9%A0%E6%96%87%E6%A1%A3/Untitled%201/"/>
      <url>2021/01/22/esp%E7%9B%B8%E5%85%B3%E7%9A%84%E5%AD%A6%E4%B9%A0%E6%96%87%E6%A1%A3/Untitled%201/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2021/01/22/esp%E7%9B%B8%E5%85%B3%E7%9A%84%E5%AD%A6%E4%B9%A0%E6%96%87%E6%A1%A3/Untitled/"/>
      <url>2021/01/22/esp%E7%9B%B8%E5%85%B3%E7%9A%84%E5%AD%A6%E4%B9%A0%E6%96%87%E6%A1%A3/Untitled/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th>寄存器名称</th><th>DPORT 地址</th><th>AHB（安全）地址</th></tr></thead><tbody><tr><td>UART_FIFO_REG</td><td>0x3FF40000</td><td>0x60000000</td></tr><tr><td>UART1_FIFO_REG</td><td>0x3FF50000</td><td>0x60010000</td></tr><tr><td>UART2_FIFO_REG</td><td>0x3FF6E000</td><td>0x6002E000</td></tr><tr><td>I2S0_FIFO_RD_REG</td><td>0x3FF4F004</td><td>0x6000F004</td></tr><tr><td>I2S1_FIFO_RD_REG</td><td>0x3FF6D004</td><td>0x6002D004</td></tr><tr><td>GPIO_OUT_REG</td><td>0x3FF44004</td><td>0x60004004</td></tr><tr><td>GPIO_OUT_W1TC_REG</td><td>0x3FF4400c</td><td>0x6000400c</td></tr><tr><td>GPIO_OUT1_REG</td><td>0x3FF44010</td><td>0x60004010</td></tr><tr><td>GPIO_OUT1_W1TS_REG</td><td>0x3FF44014</td><td>0x60004014</td></tr><tr><td>GPIO_OUT1_W1TC_REG</td><td>0x3FF44018</td><td>0x60004018</td></tr><tr><td>GPIO_ENABLE_REG</td><td>0x3FF44020</td><td>0x60004020</td></tr><tr><td>GPIO_ENABLE_W1TS_REG</td><td>0x3FF44024</td><td>0x60004024</td></tr><tr><td>GPIO_ENABLE_W1TC_REG</td><td>0x3FF44028</td><td>0x60004028</td></tr><tr><td>GPIO_ENABLE1_REG</td><td>0x3FF4402c</td><td>0x6000402c</td></tr><tr><td>GPIO_ENABLE1_W1TS_REG</td><td>0x3FF44030</td><td>0x60004030</td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CPU架构之争——X86-ARM</title>
      <link href="2020/11/03/CPU%E6%9E%B6%E6%9E%84%E4%B9%8B%E4%BA%89%E2%80%94%E2%80%94X86-ARM/"/>
      <url>2020/11/03/CPU%E6%9E%B6%E6%9E%84%E4%B9%8B%E4%BA%89%E2%80%94%E2%80%94X86-ARM/</url>
      
        <content type="html"><![CDATA[<h2 id="CPU-架构之争——X86-VS-ARM"><a href="#CPU-架构之争——X86-VS-ARM" class="headerlink" title="CPU 架构之争——X86 VS ARM"></a>CPU 架构之争——X86 VS ARM</h2><p><strong>写在前面：</strong></p><p>苹果在2020双十一之际退出了Macbook的全新一代，使用了基于ARM架构的Apple Silicon，当时的我出于好奇检索了一下有关ARM的信息，并写下这篇文章以供后续反复学习。 </p><p>CPU 大家都知道 intel 和 AMD 这两家公司，但对于 CPU 使用的架构很多人却只知道名字但不知道其中的区别，今天我们就来一探究竟。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux程序设计学习（一）</title>
      <link href="2020/11/03/Linux%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/Linux%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>2020/11/03/Linux%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/Linux%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>reStructuredText语法指引</title>
      <link href="2020/10/23/reStructuredText%E8%AF%AD%E6%B3%95%E6%8C%87%E5%BC%95/"/>
      <url>2020/10/23/reStructuredText%E8%AF%AD%E6%B3%95%E6%8C%87%E5%BC%95/</url>
      
        <content type="html"><![CDATA[<p>rst的基础语法与markdown十分相似，大家可以用这个在线编辑器体验一下rst编写文档：<a href="http://rst.ninjs.org/">rst在线Editor</a></p><p><strong>下面介绍rst基本语法：</strong></p><pre class="line-numbers language-reStructuredText"><code class="language-reStructuredText">**加粗***斜体*无序列表- - 一级标题==============================二级标题~~~~~~~~~~~~~~~三级标题------------------四级标题^^^^^^^^^^^^^^^^^^^^^五级标题"""""""""""""""""六级标题*****************<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ESP学习笔记（五）</title>
      <link href="2020/10/22/esp%E7%9B%B8%E5%85%B3%E7%9A%84%E5%AD%A6%E4%B9%A0%E6%96%87%E6%A1%A3/ESP%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%94%EF%BC%89/"/>
      <url>2020/10/22/esp%E7%9B%B8%E5%85%B3%E7%9A%84%E5%AD%A6%E4%B9%A0%E6%96%87%E6%A1%A3/ESP%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%94%EF%BC%89/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> ESP学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ESP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ESP学习笔记（三）常用名词解释list</title>
      <link href="2020/10/22/esp%E7%9B%B8%E5%85%B3%E7%9A%84%E5%AD%A6%E4%B9%A0%E6%96%87%E6%A1%A3/ESP%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89%E5%B8%B8%E8%A7%81%E5%90%8D%E8%AF%8D%E8%A7%A3%E9%87%8Alist/"/>
      <url>2020/10/22/esp%E7%9B%B8%E5%85%B3%E7%9A%84%E5%AD%A6%E4%B9%A0%E6%96%87%E6%A1%A3/ESP%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89%E5%B8%B8%E8%A7%81%E5%90%8D%E8%AF%8D%E8%A7%A3%E9%87%8Alist/</url>
      
        <content type="html"><![CDATA[<h1 id="ESP学习笔记（二）常见名词解释list"><a href="#ESP学习笔记（二）常见名词解释list" class="headerlink" title="ESP学习笔记（二）常见名词解释list"></a>ESP学习笔记（二）常见名词解释list</h1><p>对于初学的开发者来说，面对官方文档里各种大写英文的技术词汇十分头大，想要学习却无法第一时间get到这个词是什么意思、用在什么场景。这篇文章将会直观的以表格的形式汇总我在学习ESP32开发的过程中遇到的所有问题。</p><table><thead><tr><th align="center">序号</th><th align="center">名词</th><th align="center">解释</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">ESP32</td><td align="center">Espressif公司推出的Wi-Fi蓝牙集成模组</td></tr><tr><td align="center">2</td><td align="center">GPIO &amp; RTC GPIO</td><td align="center"></td></tr><tr><td align="center">3</td><td align="center">UART</td><td align="center">嵌入式应用通常要求一个简单的并且占用系统资源少的方法来传输数据.通用异步收发传输器(UART) 即可以满足这些要求,它能够灵活地与外部设备进行全双工数据交换</td></tr><tr><td align="center">4</td><td align="center">ADC</td><td align="center">Analog to Digital Converter，用于模拟信号的测量（电压）</td></tr><tr><td align="center">5</td><td align="center">DAC</td><td align="center">Digital To Analog Converter</td></tr><tr><td align="center">6</td><td align="center">I2C</td><td align="center">I2C (内部集成电路)总线可用于与连接到与 ESP32 相同的总线的多个外部设备进行通信</td></tr><tr><td align="center">7</td><td align="center">I2S</td><td align="center"></td></tr><tr><td align="center">8</td><td align="center">SPI - SPI Master</td><td align="center"></td></tr><tr><td align="center">9</td><td align="center">SPI - SPI Slave</td><td align="center"></td></tr><tr><td align="center">10</td><td align="center">Timer</td><td align="center"></td></tr><tr><td align="center">11</td><td align="center">LED Control</td><td align="center"></td></tr><tr><td align="center">12</td><td align="center">MCPWM</td><td align="center"></td></tr><tr><td align="center">13</td><td align="center">Pulse Counter</td><td align="center"></td></tr><tr><td align="center">14</td><td align="center">Sigma-delta Modulation</td><td align="center"></td></tr><tr><td align="center">15</td><td align="center">Touch Sensor</td><td align="center"></td></tr><tr><td align="center">16</td><td align="center">Over The Air Updates(OTA)</td><td align="center"></td></tr><tr><td align="center">17</td><td align="center">SDMMC Host Driver</td><td align="center"></td></tr><tr><td align="center">18</td><td align="center">Vitual filesystem</td><td align="center"></td></tr><tr><td align="center">19</td><td align="center">HIgh Resolution Timer</td><td align="center"></td></tr><tr><td align="center">20</td><td align="center">RTC和低功耗管理</td><td align="center"></td></tr><tr><td align="center">21</td><td align="center">电源管理</td><td align="center"></td></tr><tr><td align="center">22</td><td align="center">睡眠模式</td><td align="center"></td></tr><tr><td align="center">23</td><td align="center">看门狗</td><td align="center"></td></tr><tr><td align="center">24</td><td align="center">SPIFFS文件系统</td><td align="center"></td></tr><tr><td align="center">25</td><td align="center">脉冲计数器</td><td align="center"></td></tr><tr><td align="center">26</td><td align="center">NVS</td><td align="center"></td></tr><tr><td align="center">27</td><td align="center">ESP-Mesh</td><td align="center">基于Wi-Fi 协议之上的网络协议；允许分布在大范围区域内的大量设备在同一个  WLAN 中相互连接</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> ESP学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ESP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ESP学习笔记（三）</title>
      <link href="2020/10/22/esp%E7%9B%B8%E5%85%B3%E7%9A%84%E5%AD%A6%E4%B9%A0%E6%96%87%E6%A1%A3/ESP%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>2020/10/22/esp%E7%9B%B8%E5%85%B3%E7%9A%84%E5%AD%A6%E4%B9%A0%E6%96%87%E6%A1%A3/ESP%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="dev-ttyUSB0-permission-denied-解决办法"><a href="#dev-ttyUSB0-permission-denied-解决办法" class="headerlink" title="dev/ttyUSB0 permission denied　解决办法"></a>dev/ttyUSB0 permission denied　解决办法</h1><p>sudo chmod 777 /dev/ttyUSB0 </p>]]></content>
      
      
      <categories>
          
          <category> ESP学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ESP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ESP学习笔记（四）</title>
      <link href="2020/10/22/esp%E7%9B%B8%E5%85%B3%E7%9A%84%E5%AD%A6%E4%B9%A0%E6%96%87%E6%A1%A3/ESP%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
      <url>2020/10/22/esp%E7%9B%B8%E5%85%B3%E7%9A%84%E5%AD%A6%E4%B9%A0%E6%96%87%E6%A1%A3/ESP%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="使用ESP32驱动电子墨水屏"><a href="#使用ESP32驱动电子墨水屏" class="headerlink" title="使用ESP32驱动电子墨水屏"></a>使用ESP32驱动电子墨水屏</h1><p><a href="https://www.zhihu.com/people/tao-guan-fu"><img src="https://pic1.zhimg.com/d859faa3b38799fa85b5644f48352063_xs.jpg" alt="IEEE1364"></a></p><p><a href="https://www.zhihu.com/people/tao-guan-fu">IEEE1364</a></p><p>人在江湖身不由己</p><p>34 人赞同了该文章</p><h2 id="未经私信同意禁止转载！"><a href="#未经私信同意禁止转载！" class="headerlink" title="未经私信同意禁止转载！"></a>未经私信同意禁止转载！</h2><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a><strong>一、简介</strong></h2><p>显示技术发展很快，高中的时候大家还在学习阴极射线管显示，天天在算电子的轨迹。而如今随处可见LED显示液晶显示。<br>今天给大家介绍一下电子墨水屏。目前生活中比较常见的是在kindle上使用的，显示效果很像纸，质感很好，不上眼睛。这篇文章就是介绍电子墨水屏，并给大家提供在 ESP32 上使用 MicroPython 驱动墨水屏的demo。</p><p>电子墨水屏，又称电子纸，采用“微胶囊电泳显示”技术进行图像显示， 其基本原理是悬浮在液体中的带电纳米粒子受到电场作用而产生迁移。电子纸显示屏是靠反射环境光来显示图案的，不需要背光，即使是在阳光底下，电子纸显示屏依然清晰可视，可视角度几乎达到了 180°。因此，电子纸显示屏非常适合阅读。具有耗低、视角宽、阳光直射下仍可清晰显示等优点，常用于货架标签、工业仪表等显示<br>应用。电子纸不同于我们常见的显示技术，它的的特点是在掉电状态下可以保持显示状态，这点特性使得它在低刷新低功耗领域有很大的应用潜力，比如电子书、电子广告牌、电子标签等等。当然目前电子墨水屏由以下三个缺点：<br>1.造价很高，严重限制其广泛应用。<br>2.支持的显示颜色很少，目前主流的是黑白两色，市场上能看到支持黑白红或者背白黄三色的，但是价格高多了。<br>3.刷新速率低，无法支持动态显示。</p><p>我这次试用的是微雪的1.54in黑白显示模块。在这里放一个带彩色显示的官方图片（微雪应该付我广告费）。</p><p>hbqrclhkfdldmkvt</p><p><img src="https://pic4.zhimg.com/80/v2-33eaea8070221d8261fcd61f5921115b_1440w.jpg" alt="img">微雪1.54inc黑白红三色电子墨水屏</p><p>电子墨水屏使用的SPI接口，其引脚定义以及和ESP32的连接关系如下</p><p><img src="https://pic3.zhimg.com/80/v2-404b7e73844d613f7a439afc66847fca_1440w.jpg" alt="img">接口定义</p><h2 id="二、驱动编写"><a href="#二、驱动编写" class="headerlink" title="二、驱动编写"></a><strong>二、驱动编写</strong></h2><p>电子墨水屏的驱动官方提供C语言版本和python版本，我写的是Micropyon版本，主要是在pyhon版本的基础拿掉Micropython中无法使用的图片库，并且做了底层驱动数据格式上的转换，驱动分为两个文件epdif.py和epd1in54.py。</p><p>epdif.py中定义了硬件接口和数据写入函数，源码如下</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> machine <span class="token keyword">import</span> Pin<span class="token punctuation">,</span> SPI<span class="token keyword">import</span> time<span class="token comment" spellcheck="true"># Pin definition</span>reset_pin         <span class="token operator">=</span> Pin<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>Pin<span class="token punctuation">.</span>OUT<span class="token punctuation">)</span>dc_pin          <span class="token operator">=</span> Pin<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span>Pin<span class="token punctuation">.</span>OUT<span class="token punctuation">)</span>cs_pin          <span class="token operator">=</span> Pin<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span>Pin<span class="token punctuation">.</span>OUT<span class="token punctuation">)</span>busy_pin        <span class="token operator">=</span> Pin<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>Pin<span class="token punctuation">.</span>IN<span class="token punctuation">)</span>gpio_sck <span class="token operator">=</span> Pin<span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span>gpio_mosi <span class="token operator">=</span> Pin<span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">)</span>gpio_miso <span class="token operator">=</span> Pin<span class="token punctuation">(</span><span class="token number">19</span><span class="token punctuation">)</span>spi <span class="token operator">=</span> SPI<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> baudrate<span class="token operator">=</span><span class="token number">100000</span><span class="token punctuation">,</span> polarity<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> phase<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> sck<span class="token operator">=</span>gpio_sck<span class="token punctuation">,</span> mosi<span class="token operator">=</span>gpio_mosi<span class="token punctuation">,</span> miso<span class="token operator">=</span>gpio_miso<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">epd_digital_write</span><span class="token punctuation">(</span>pin<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">:</span>    pin<span class="token punctuation">.</span>value<span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">epd_digital_read</span><span class="token punctuation">(</span>pin<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> pin<span class="token punctuation">.</span>value<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">epd_delay_ms</span><span class="token punctuation">(</span>delaytime<span class="token punctuation">)</span><span class="token punctuation">:</span>    time<span class="token punctuation">.</span>sleep_ms<span class="token punctuation">(</span>delaytime<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">spi_transfer</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    spi<span class="token punctuation">.</span>write<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">epd_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    epd_digital_write<span class="token punctuation">(</span>cs_pin<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    spi<span class="token punctuation">.</span>init<span class="token punctuation">(</span>baudrate<span class="token operator">=</span><span class="token number">200000</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>epd1in54.py中定义了复位设置刷新区域等函数，用于对显示信息进行设置。源码如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> epdif<span class="token keyword">from</span> machine <span class="token keyword">import</span> Pin<span class="token punctuation">,</span> SPI<span class="token keyword">import</span> ujson<span class="token keyword">import</span> struct<span class="token comment" spellcheck="true"># Display resolution</span>EPD_WIDTH       <span class="token operator">=</span> <span class="token number">200</span>EPD_HEIGHT      <span class="token operator">=</span> <span class="token number">200</span><span class="token comment" spellcheck="true"># EPD1IN54 commands</span>DRIVER_OUTPUT_CONTROL                       <span class="token operator">=</span> b<span class="token string">'\x01'</span>BOOSTER_SOFT_START_CONTROL                  <span class="token operator">=</span> b<span class="token string">'\x0C'</span>GATE_SCAN_START_POSITION                    <span class="token operator">=</span> b<span class="token string">'\x0F'</span>DEEP_SLEEP_MODE                             <span class="token operator">=</span> b<span class="token string">'\x10'</span>DATA_ENTRY_MODE_SETTING                     <span class="token operator">=</span> b<span class="token string">'\x11'</span>SW_RESET                                    <span class="token operator">=</span> b<span class="token string">'\x12'</span>TEMPERATURE_SENSOR_CONTROL                  <span class="token operator">=</span> b<span class="token string">'\x1A'</span>MASTER_ACTIVATION                           <span class="token operator">=</span> b<span class="token string">'\x20'</span>DISPLAY_UPDATE_CONTROL_1                    <span class="token operator">=</span> b<span class="token string">'\x21'</span>DISPLAY_UPDATE_CONTROL_2                    <span class="token operator">=</span> b<span class="token string">'\x22'</span>WRITE_RAM                                   <span class="token operator">=</span> b<span class="token string">'\x24'</span>WRITE_VCOM_REGISTER                         <span class="token operator">=</span> b<span class="token string">'\x2C'</span>WRITE_LUT_REGISTER                          <span class="token operator">=</span> b<span class="token string">'\x32'</span>SET_DUMMY_LINE_PERIOD                       <span class="token operator">=</span> b<span class="token string">'\x3A'</span>SET_GATE_TIME                               <span class="token operator">=</span> b<span class="token string">'\x3B'</span>BORDER_WAVEFORM_CONTROL                     <span class="token operator">=</span> b<span class="token string">' '</span>SET_RAM_X_ADDRESS_START_END_POSITION        <span class="token operator">=</span> b<span class="token string">'\x44'</span>SET_RAM_Y_ADDRESS_START_END_POSITION        <span class="token operator">=</span> b<span class="token string">'\x45'</span>SET_RAM_X_ADDRESS_COUNTER                   <span class="token operator">=</span> b<span class="token string">'\x4E'</span>SET_RAM_Y_ADDRESS_COUNTER                   <span class="token operator">=</span> b<span class="token string">'\x4F'</span>TERMINATE_FRAME_READ_WRITE                  <span class="token operator">=</span> b<span class="token string">'\xFF'</span><span class="token keyword">class</span> <span class="token class-name">EPD</span> <span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>reset_pin <span class="token operator">=</span> epdif<span class="token punctuation">.</span>reset_pin        self<span class="token punctuation">.</span>dc_pin <span class="token operator">=</span> epdif<span class="token punctuation">.</span>dc_pin        self<span class="token punctuation">.</span>busy_pin <span class="token operator">=</span> epdif<span class="token punctuation">.</span>busy_pin        self<span class="token punctuation">.</span>width <span class="token operator">=</span> EPD_WIDTH        self<span class="token punctuation">.</span>height <span class="token operator">=</span> EPD_HEIGHT        self<span class="token punctuation">.</span>lut <span class="token operator">=</span> self<span class="token punctuation">.</span>lut_full_update    lut_full_update <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token number">0x02</span><span class="token punctuation">,</span> <span class="token number">0x02</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0x11</span><span class="token punctuation">,</span> <span class="token number">0x12</span><span class="token punctuation">,</span> <span class="token number">0x12</span><span class="token punctuation">,</span> <span class="token number">0x22</span><span class="token punctuation">,</span> <span class="token number">0x22</span><span class="token punctuation">,</span>         <span class="token number">0x66</span><span class="token punctuation">,</span> <span class="token number">0x69</span><span class="token punctuation">,</span> <span class="token number">0x69</span><span class="token punctuation">,</span> <span class="token number">0x59</span><span class="token punctuation">,</span> <span class="token number">0x58</span><span class="token punctuation">,</span> <span class="token number">0x99</span><span class="token punctuation">,</span> <span class="token number">0x99</span><span class="token punctuation">,</span> <span class="token number">0x88</span><span class="token punctuation">,</span>         <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0xF8</span><span class="token punctuation">,</span> <span class="token number">0xB4</span><span class="token punctuation">,</span> <span class="token number">0x13</span><span class="token punctuation">,</span> <span class="token number">0x51</span><span class="token punctuation">,</span>         <span class="token number">0x35</span><span class="token punctuation">,</span> <span class="token number">0x51</span><span class="token punctuation">,</span> <span class="token number">0x51</span><span class="token punctuation">,</span> <span class="token number">0x19</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0x00</span>    <span class="token punctuation">]</span>    lut_partial_update  <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span>         <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span>         <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x13</span><span class="token punctuation">,</span> <span class="token number">0x14</span><span class="token punctuation">,</span> <span class="token number">0x44</span><span class="token punctuation">,</span> <span class="token number">0x12</span><span class="token punctuation">,</span>         <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span>    <span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">digital_write</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> pin<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>        epdif<span class="token punctuation">.</span>epd_digital_write<span class="token punctuation">(</span>pin<span class="token punctuation">,</span> value<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">digital_read</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> pin<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> epdif<span class="token punctuation">.</span>epd_digital_read<span class="token punctuation">(</span>pin<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">delay_ms</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> delaytime<span class="token punctuation">)</span><span class="token punctuation">:</span>        epdif<span class="token punctuation">.</span>epd_delay_ms<span class="token punctuation">(</span>delaytime<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">send_command</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> command<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>digital_write<span class="token punctuation">(</span>self<span class="token punctuation">.</span>dc_pin<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># the parameter type is list but not int</span>        <span class="token comment" spellcheck="true"># so use [command] instead of command</span>        epdif<span class="token punctuation">.</span>spi_transfer<span class="token punctuation">(</span>command<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">send_data</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>digital_write<span class="token punctuation">(</span>self<span class="token punctuation">.</span>dc_pin<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># the parameter type is list but not int</span>        <span class="token comment" spellcheck="true"># so use [data] instead of data</span>        epdif<span class="token punctuation">.</span>spi_transfer<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">init</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> lut<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>epdif<span class="token punctuation">.</span>epd_init<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>        <span class="token comment" spellcheck="true"># EPD hardware init start</span>        self<span class="token punctuation">.</span>lut <span class="token operator">=</span> lut        self<span class="token punctuation">.</span>reset<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>send_command<span class="token punctuation">(</span>DRIVER_OUTPUT_CONTROL<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>send_data<span class="token punctuation">(</span>struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>EPD_HEIGHT <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>send_data<span class="token punctuation">(</span>struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>EPD_HEIGHT <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>send_data<span class="token punctuation">(</span>b<span class="token string">'\x00'</span><span class="token punctuation">)</span>                     <span class="token comment" spellcheck="true"># GD = 0 SM = 0 TB = 0</span>        self<span class="token punctuation">.</span>send_command<span class="token punctuation">(</span>BOOSTER_SOFT_START_CONTROL<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>send_data<span class="token punctuation">(</span>b<span class="token string">'\xD7'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>send_data<span class="token punctuation">(</span>b<span class="token string">'\xD6'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>send_data<span class="token punctuation">(</span>b<span class="token string">'\x9D'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>send_command<span class="token punctuation">(</span>WRITE_VCOM_REGISTER<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>send_data<span class="token punctuation">(</span>b<span class="token string">'\xA8'</span><span class="token punctuation">)</span>                     <span class="token comment" spellcheck="true"># VCOM 7C</span>        self<span class="token punctuation">.</span>send_command<span class="token punctuation">(</span>SET_DUMMY_LINE_PERIOD<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>send_data<span class="token punctuation">(</span>b<span class="token string">'\x1A'</span><span class="token punctuation">)</span>                     <span class="token comment" spellcheck="true"># 4 dummy lines per gate</span>        self<span class="token punctuation">.</span>send_command<span class="token punctuation">(</span>SET_GATE_TIME<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>send_data<span class="token punctuation">(</span>b<span class="token string">'\x08'</span><span class="token punctuation">)</span>                     <span class="token comment" spellcheck="true"># 2us per line</span>        self<span class="token punctuation">.</span>send_command<span class="token punctuation">(</span>DATA_ENTRY_MODE_SETTING<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>send_data<span class="token punctuation">(</span>b<span class="token string">'\x03'</span><span class="token punctuation">)</span>                     <span class="token comment" spellcheck="true"># X increment Y increment</span>        self<span class="token punctuation">.</span>set_lut<span class="token punctuation">(</span>self<span class="token punctuation">.</span>lut<span class="token punctuation">)</span>              <span class="token comment" spellcheck="true"># EPD hardware init end</span>        <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">wait_until_idle</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>digital_read<span class="token punctuation">(</span>self<span class="token punctuation">.</span>busy_pin<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token comment" spellcheck="true"># 0: idle, 1: busy</span>            self<span class="token punctuation">.</span>delay_ms<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">##</span> <span class="token comment" spellcheck="true">#  @brief: module reset.</span> <span class="token comment" spellcheck="true">#          often used to awaken the module in deep sleep,</span> <span class="token comment" spellcheck="true">##</span>    <span class="token keyword">def</span> <span class="token function">reset</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>digital_write<span class="token punctuation">(</span>self<span class="token punctuation">.</span>reset_pin<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true"># module reset</span>        self<span class="token punctuation">.</span>delay_ms<span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>digital_write<span class="token punctuation">(</span>self<span class="token punctuation">.</span>reset_pin<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>delay_ms<span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">##</span> <span class="token comment" spellcheck="true">#  @brief: set the look-up table register</span> <span class="token comment" spellcheck="true">##</span>    <span class="token keyword">def</span> <span class="token function">set_lut</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> lut<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>lut <span class="token operator">=</span> lut        self<span class="token punctuation">.</span>send_command<span class="token punctuation">(</span>WRITE_LUT_REGISTER<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># the length of look-up table is 30 bytes</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>lut<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>send_data<span class="token punctuation">(</span>struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>lut<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">##</span> <span class="token comment" spellcheck="true">#  @brief: put an image to the frame memory.</span> <span class="token comment" spellcheck="true">#          this won't update the display.</span> <span class="token comment" spellcheck="true">##</span>    <span class="token keyword">def</span> <span class="token function">set_frame_memory</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> image<span class="token punctuation">,</span> image_width<span class="token punctuation">,</span>image_height<span class="token punctuation">,</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#if (image == None or x &lt; 0 or y &lt; 0):</span>        <span class="token comment" spellcheck="true">#    return</span>        <span class="token comment" spellcheck="true"># x point must be the multiple of 8 or the last 3 bits will be ignored</span>        x <span class="token operator">=</span> x <span class="token operator">&amp;</span> <span class="token number">0xF8</span>        image_width <span class="token operator">=</span> image_width <span class="token operator">&amp;</span> <span class="token number">0xF8</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">+</span> image_width <span class="token operator">>=</span> self<span class="token punctuation">.</span>width<span class="token punctuation">)</span><span class="token punctuation">:</span>            x_end <span class="token operator">=</span> self<span class="token punctuation">.</span>width <span class="token operator">-</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            x_end <span class="token operator">=</span> x <span class="token operator">+</span> image_width <span class="token operator">-</span> <span class="token number">1</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">+</span> image_height <span class="token operator">>=</span> self<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">:</span>            y_end <span class="token operator">=</span> self<span class="token punctuation">.</span>height <span class="token operator">-</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            y_end <span class="token operator">=</span> y <span class="token operator">+</span> image_height <span class="token operator">-</span> <span class="token number">1</span>                self<span class="token punctuation">.</span>set_memory_area<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> x_end<span class="token punctuation">,</span> y_end<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>set_memory_pointer<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>send_command<span class="token punctuation">(</span>WRITE_RAM<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># send the image data</span>        <span class="token comment" spellcheck="true">#pixels = image_monocolor.load()</span>        byte_to_send <span class="token operator">=</span> <span class="token number">0x00</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> y_end <span class="token operator">-</span> y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 1 byte = 8 pixels, steps of i = 8</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x_end <span class="token operator">-</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>send_data<span class="token punctuation">(</span>struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">,</span> image<span class="token punctuation">[</span>i<span class="token operator">+</span>j<span class="token operator">*</span><span class="token punctuation">(</span>image_width <span class="token operator">>></span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># Set the bits for the column of pixels at the current position.</span>                <span class="token comment" spellcheck="true">#if pixels[i, j] != 0:</span>                <span class="token comment" spellcheck="true">#    byte_to_send |= 0x80 >> (i % 8)</span>                <span class="token comment" spellcheck="true">#if (i % 8 == 7):</span>                <span class="token comment" spellcheck="true">#    self.send_data(struct.pack("B", byte_to_send))</span>                <span class="token comment" spellcheck="true">#    byte_to_send = 0x00</span><span class="token comment" spellcheck="true">##</span> <span class="token comment" spellcheck="true">#  @brief: clear the frame memory with the specified color.</span> <span class="token comment" spellcheck="true">#          this won't update the display.</span> <span class="token comment" spellcheck="true">##</span>    <span class="token keyword">def</span> <span class="token function">clear_frame_memory</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> color<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>set_memory_area<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>width <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>height <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>set_memory_pointer<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>send_command<span class="token punctuation">(</span>WRITE_RAM<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># send the color data</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>width <span class="token operator">/</span> <span class="token number">8</span> <span class="token operator">*</span> self<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>send_data<span class="token punctuation">(</span>struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">,</span> color<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">##</span> <span class="token comment" spellcheck="true">#  @brief: update the display</span> <span class="token comment" spellcheck="true">#          there are 2 memory areas embedded in the e-paper display</span> <span class="token comment" spellcheck="true">#          but once this function is called,</span> <span class="token comment" spellcheck="true">#          the the next action of SetFrameMemory or ClearFrame will </span> <span class="token comment" spellcheck="true">#          set the other memory area.</span> <span class="token comment" spellcheck="true">##</span>    <span class="token keyword">def</span> <span class="token function">display_frame</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>send_command<span class="token punctuation">(</span>DISPLAY_UPDATE_CONTROL_2<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>send_data<span class="token punctuation">(</span>b<span class="token string">'\xC4'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>send_command<span class="token punctuation">(</span>MASTER_ACTIVATION<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>send_command<span class="token punctuation">(</span>TERMINATE_FRAME_READ_WRITE<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>wait_until_idle<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">##</span> <span class="token comment" spellcheck="true">#  @brief: specify the memory area for data R/W</span> <span class="token comment" spellcheck="true">##</span>    <span class="token keyword">def</span> <span class="token function">set_memory_area</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x_start<span class="token punctuation">,</span> y_start<span class="token punctuation">,</span> x_end<span class="token punctuation">,</span> y_end<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>send_command<span class="token punctuation">(</span>SET_RAM_X_ADDRESS_START_END_POSITION<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># x point must be the multiple of 8 or the last 3 bits will be ignored</span>        self<span class="token punctuation">.</span>send_data<span class="token punctuation">(</span>struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x_start <span class="token operator">>></span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>send_data<span class="token punctuation">(</span>struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x_end <span class="token operator">>></span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>send_command<span class="token punctuation">(</span>SET_RAM_Y_ADDRESS_START_END_POSITION<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>send_data<span class="token punctuation">(</span>struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">,</span> y_start <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>send_data<span class="token punctuation">(</span>struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>y_start <span class="token operator">>></span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>send_data<span class="token punctuation">(</span>struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">,</span> y_end <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>send_data<span class="token punctuation">(</span>struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>y_end <span class="token operator">>></span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">##</span> <span class="token comment" spellcheck="true">#  @brief: specify the start point for data R/W</span> <span class="token comment" spellcheck="true">##</span>    <span class="token keyword">def</span> <span class="token function">set_memory_pointer</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>send_command<span class="token punctuation">(</span>SET_RAM_X_ADDRESS_COUNTER<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># x point must be the multiple of 8 or the last 3 bits will be ignored</span>        self<span class="token punctuation">.</span>send_data<span class="token punctuation">(</span>struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x <span class="token operator">>></span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>send_command<span class="token punctuation">(</span>SET_RAM_Y_ADDRESS_COUNTER<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>send_data<span class="token punctuation">(</span>struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">,</span> y <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>send_data<span class="token punctuation">(</span>struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>y <span class="token operator">>></span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>wait_until_idle<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">##</span> <span class="token comment" spellcheck="true">#  @brief: After this command is transmitted, the chip would enter the</span> <span class="token comment" spellcheck="true">#          deep-sleep mode to save power.</span> <span class="token comment" spellcheck="true">#          The deep sleep mode would return to standby by hardware reset.</span> <span class="token comment" spellcheck="true">#          You can use reset() to awaken or init() to initialize</span> <span class="token comment" spellcheck="true">##</span>    <span class="token keyword">def</span> <span class="token function">sleep</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>send_command<span class="token punctuation">(</span>DEEP_SLEEP_MODE<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>wait_until_idle<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还编写了一个简单的测试demo：</p><pre class="line-numbers language-py3tb"><code class="language-py3tb">def test():    print('start\n')    epd = epd1in54.EPD()    epd.init(epd.lut_full_update)    print('epd init finish \n')    epd.clear_frame_memory(0xff)    epd.set_frame_memory(gImage_imag,200,200, 0, 0)    epd.display_frame()    epd.delay_ms(2000)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我将测试源码和相关参考资料打包放在百度云盘中。<br>链接：<a href="https://link.zhihu.com/?target=https://pan.baidu.com/s/1RrKF14Nc21VC-coSittHQQ">https://pan.baidu.com/s/1RrKF14Nc21VC-coSittHQQ</a> 密码：jp6t</p><h2 id="三、构想"><a href="#三、构想" class="headerlink" title="三、构想"></a><strong>三、构想</strong></h2><p>有了墨水屏和wifi功能，如果添加上简单的按键控制和电池，就具备一个kindle的基本结构了，做一个小号的kindle应该不难的哈。</p><p>最后，如果有大佬打赏，让我买个彩色的墨水屏玩玩就好了。</p>]]></content>
      
      
      <categories>
          
          <category> ESP学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ESP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2020/10/22/esp%E7%9B%B8%E5%85%B3%E7%9A%84%E5%AD%A6%E4%B9%A0%E6%96%87%E6%A1%A3/ESP%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%E4%BD%BF%E7%94%A8VS%20Code%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%BC%80%E5%8F%91ESP32/"/>
      <url>2020/10/22/esp%E7%9B%B8%E5%85%B3%E7%9A%84%E5%AD%A6%E4%B9%A0%E6%96%87%E6%A1%A3/ESP%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%E4%BD%BF%E7%94%A8VS%20Code%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%BC%80%E5%8F%91ESP32/</url>
      
        <content type="html"><![CDATA[<h1 id="ESP学习笔记（一）使用VS-Code快捷键开发"><a href="#ESP学习笔记（一）使用VS-Code快捷键开发" class="headerlink" title="ESP学习笔记（一）使用VS Code快捷键开发"></a>ESP学习笔记（一）使用VS Code快捷键开发</h1><p>根据该教程，用户可在VS Code里快速地对ESP32开发板进行编译烧录等操作。</p><h3 id="Step1：VS-Code任务配置"><a href="#Step1：VS-Code任务配置" class="headerlink" title="Step1：VS Code任务配置"></a>Step1：VS Code任务配置</h3><ul><li>按下 <code>Crtl+Shift+P</code> 并键入 <code>Tasks:Configure Task</code></li><li>选择使用模版新建 <code>tasks.json</code> 文件，选择 <code>others</code></li><li>复制如下ESP32任务配置模版（包含编辑、下载、清除编译/Flash、打开monitor、打开menuconfig等）</li></ul><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>    // See https<span class="token operator">:</span>//go.microsoft.com/fwlink/?LinkId=<span class="token number">733558</span>    // for the documentation about the tasks.json format    <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"2.0.0"</span><span class="token punctuation">,</span>    <span class="token property">"tasks"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token property">"label"</span><span class="token operator">:</span> <span class="token string">"build app"</span><span class="token punctuation">,</span> // f5            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"shell"</span><span class="token punctuation">,</span>            <span class="token property">"command"</span><span class="token operator">:</span> <span class="token string">"cd ${fileDirname} &amp;&amp; cd ../ &amp;&amp; make -j8"</span><span class="token punctuation">,</span>            <span class="token property">"group"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token property">"kind"</span><span class="token operator">:</span> <span class="token string">"build"</span><span class="token punctuation">,</span>                <span class="token property">"isDefault"</span><span class="token operator">:</span> <span class="token boolean">true</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            <span class="token property">"label"</span><span class="token operator">:</span> <span class="token string">"flash app"</span><span class="token punctuation">,</span> // f6            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"shell"</span><span class="token punctuation">,</span>            <span class="token property">"command"</span><span class="token operator">:</span> <span class="token string">"cd ${fileDirname} &amp;&amp; cd ../ &amp;&amp; make -j8 flash"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            <span class="token property">"label"</span><span class="token operator">:</span> <span class="token string">"monitor"</span><span class="token punctuation">,</span> // f7            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"shell"</span><span class="token punctuation">,</span>            <span class="token property">"command"</span><span class="token operator">:</span> <span class="token string">"cd ${fileDirname} &amp;&amp; cd ../ &amp;&amp; make monitor"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            <span class="token property">"label"</span><span class="token operator">:</span> <span class="token string">"clean app"</span><span class="token punctuation">,</span> // f8            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"shell"</span><span class="token punctuation">,</span>            <span class="token property">"command"</span><span class="token operator">:</span> <span class="token string">"cd ${fileDirname} &amp;&amp; cd ../ &amp;&amp; make clean"</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            <span class="token property">"label"</span><span class="token operator">:</span> <span class="token string">"erase flash"</span><span class="token punctuation">,</span> // f9            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"shell"</span><span class="token punctuation">,</span>            <span class="token property">"command"</span><span class="token operator">:</span> <span class="token string">"cd ${fileDirname} &amp;&amp; cd ../ &amp;&amp; make erase_flash"</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            <span class="token property">"label"</span><span class="token operator">:</span> <span class="token string">"menuconfig"</span><span class="token punctuation">,</span> // f10            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"shell"</span><span class="token punctuation">,</span>            <span class="token property">"command"</span><span class="token operator">:</span> <span class="token string">"cd ${fileDirname} &amp;&amp; cd ../ &amp;&amp; make menuconfig"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>任务配置步骤如下所示</strong>：</p><img src="/home/fangsiyuan/Videos/Peek/vscode-esp32-1.gif" alt="vscode-esp32-1" style="zoom:100%;"><h3 id="Step2：增-加快捷键"><a href="#Step2：增-加快捷键" class="headerlink" title="Step2：增%加快捷键"></a>Step2：增%加快捷键</h3><ul><li><p>按下：<code>Ctrl+Shift+P</code> </p></li><li><p>键入 <code>Preferences:Open Keyboard Shortcuts(JSON)</code></p></li><li><p>填充如下参数</p><pre class="line-numbers language-json"><code class="language-json">// Override key bindings by placing them into your key bindings file.<span class="token punctuation">[</span>    <span class="token punctuation">{</span>        <span class="token property">"key"</span><span class="token operator">:</span> <span class="token string">"f5"</span><span class="token punctuation">,</span>        <span class="token property">"command"</span><span class="token operator">:</span> <span class="token string">"workbench.action.tasks.runTask"</span><span class="token punctuation">,</span>        <span class="token property">"args"</span><span class="token operator">:</span> <span class="token string">"build app"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        <span class="token property">"key"</span><span class="token operator">:</span> <span class="token string">"f6"</span><span class="token punctuation">,</span>        <span class="token property">"command"</span><span class="token operator">:</span> <span class="token string">"workbench.action.tasks.runTask"</span><span class="token punctuation">,</span>        <span class="token property">"args"</span><span class="token operator">:</span> <span class="token string">"flash app"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        <span class="token property">"key"</span><span class="token operator">:</span> <span class="token string">"f7"</span><span class="token punctuation">,</span>        <span class="token property">"command"</span><span class="token operator">:</span> <span class="token string">"workbench.action.tasks.runTask"</span><span class="token punctuation">,</span>        <span class="token property">"args"</span><span class="token operator">:</span> <span class="token string">"monitor"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        <span class="token property">"key"</span><span class="token operator">:</span> <span class="token string">"f8"</span><span class="token punctuation">,</span>        <span class="token property">"command"</span><span class="token operator">:</span> <span class="token string">"workbench.action.tasks.runTask"</span><span class="token punctuation">,</span>        <span class="token property">"args"</span><span class="token operator">:</span> <span class="token string">"clean app"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        <span class="token property">"key"</span><span class="token operator">:</span> <span class="token string">"f9"</span><span class="token punctuation">,</span>        <span class="token property">"command"</span><span class="token operator">:</span> <span class="token string">"workbench.action.tasks.runTask"</span><span class="token punctuation">,</span>        <span class="token property">"args"</span><span class="token operator">:</span> <span class="token string">"erase flash"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        <span class="token property">"key"</span><span class="token operator">:</span> <span class="token string">"f10"</span><span class="token punctuation">,</span>        <span class="token property">"command"</span><span class="token operator">:</span> <span class="token string">"workbench.action.tasks.runTask"</span><span class="token punctuation">,</span>        <span class="token property">"args"</span><span class="token operator">:</span> <span class="token string">"menuconfig"</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>于是，我们就可以对所选工程进行快捷键开发：</p></li></ul><table><thead><tr><th align="center">快捷键</th><th align="center">执行的命令</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">F5</td><td align="center"><code>make -j8</code></td><td align="center">编译</td></tr><tr><td align="center">F6</td><td align="center"><code>make -j8 flash</code></td><td align="center">编译、下载</td></tr><tr><td align="center">F7</td><td align="center"><code>make monitor</code></td><td align="center">监视器</td></tr><tr><td align="center">F8</td><td align="center"><code>make clean</code></td><td align="center">清除编译</td></tr><tr><td align="center">F9</td><td align="center"><code>make erase_flash</code></td><td align="center">擦除 flash</td></tr><tr><td align="center">F10</td><td align="center"><code>make menuconfig</code></td><td align="center">打开 menuconfig</td></tr></tbody></table><blockquote><p>NOTE: 这些命令都应该在工程的 <code>main</code> 目录下的文件中执行，例如： 在 VS Code 中打开了 hello_world 工程中 main 目录下的 <code>hello_world_main.c</code> 文件，可以按快捷键 <code>F6</code> 进行编译、下载。暂不支持在其他目录下进行。</p></blockquote><p>详细配置过程：</p><img src="/home/fangsiyuan/Videos/Peek/vscode-esp32-2.gif" alt="vscode-esp32-2" style="zoom:100%;">]]></content>
      
      
      <categories>
          
          <category> ESP学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ESP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux指令学习</title>
      <link href="2020/10/21/Linux%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/Linux%E6%8C%87%E4%BB%A4%E5%AD%A6%E4%B9%A0/"/>
      <url>2020/10/21/Linux%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/Linux%E6%8C%87%E4%BB%A4%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux指令学习——基础篇"><a href="#Linux指令学习——基础篇" class="headerlink" title="Linux指令学习——基础篇"></a>Linux指令学习——基础篇</h1><p>Linux（Ubuntu）作为开发者常用的操作系统，经查会用到命令行完成一系列开发，因此对于linux指令的语法学习是非常基础而又必要的。本篇主要介绍一些最基本最常用的Linux指令。</p><p><img src="https://upload-images.jianshu.io/upload_images/228680-92ad761516389d11.jpg" alt="img"></p><blockquote><h3 id="文件传输"><a href="#文件传输" class="headerlink" title="文件传输"></a>文件传输</h3><p>bye、ftp、ftpcount、ftpshut、ftpwho、ncftp、tftp、uucico、uucp、uupick、uuto、scp</p><h3 id="备份压缩"><a href="#备份压缩" class="headerlink" title="备份压缩"></a>备份压缩</h3><p>ar、bunzip2、bzip2、bzip2recover、compress、cpio、dump、gunzip、gzexe、gzip、lha、restore、tar、unarj、unzip、zip、zipinfo</p><h3 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h3><p>diff、diffstat、file、find、git、gitview、ln、locate、lsattr、mattrib、mc、mcopy、mdel、mdir、mktemp、mmove、mread、mren、mshowfat、mtools、mtoolstest、mv、od、paste、patch、rcp、rhmask、rm、slocate、split、tee、tmpwatch、touch、umask、whereis、which、cat、chattr、chgrp、chmod、chown、cksum、cmp、cp、cut、indent</p><h3 id="磁盘管理"><a href="#磁盘管理" class="headerlink" title="磁盘管理"></a>磁盘管理</h3><p>cd、df、dirs、du、edquota、eject、lndir、ls、mcd、mdeltree、mdu、mkdir、mlabel、mmd、mmount、mrd、mzip、pwd、quota、quotacheck、quotaoff、quotaon、repquota、rmdir、rmt、stat、tree、umount</p><h3 id="磁盘维护"><a href="#磁盘维护" class="headerlink" title="磁盘维护"></a>磁盘维护</h3><p>badblocks、cfdisk、dd、e2fsck、ext2ed、fdisk、fsck.ext2、fsck、fsck.minix、fsconf、hdparm、losetup、mbadblocks、mformat、mkbootdisk、mkdosfs、mke2fs、mkfs.ext2、mkfs、mkfs.minix、mkfs.msdos、mkinitrd、mkisofs、mkswap、mpartition、sfdisk、swapoff、swapon、symlinks、sync</p><h3 id="系统设置"><a href="#系统设置" class="headerlink" title="系统设置"></a>系统设置</h3><p>alias、apmd、aumix、bind、chkconfig、chroot、clock、crontab、declare、depmod、dircolors、dmesg、enable、eval、export、fbset、grpconv、grpunconv、hwclock、insmod、kbdconfig、lilo、liloconfig、lsmod、minfo、mkkickstart、modinfo、modprobe、mouseconfig、ntsysv、passwd、pwconv、pwunconv、rdate、resize、rmmod、rpm、set、setconsole、setenv、setup、sndconfig、SVGAText Mode、timeconfig、ulimit、unalias、unset</p><h3 id="系统管理"><a href="#系统管理" class="headerlink" title="系统管理"></a>系统管理</h3><p>adduser、chfn、chsh、date、exit、finger、free、fwhois、gitps、groupdel、groupmod、halt、id、kill、last、lastb、login、logname、logout、logrotate、newgrp、nice、procinfo、ps、pstree、reboot、renice、rlogin、rsh、rwho、screen、shutdown、sliplogin、su、sudo、suspend、swatch、tload、top、uname、useradd、userconf、userdel、usermod、vlock、w、who、whoami、whois</p><h3 id="文本处理"><a href="#文本处理" class="headerlink" title="文本处理"></a>文本处理</h3><p>awk、col、colrm、comm、csplit、ed、egrep、ex、fgrep、fmt、fold、grep、ispell、jed、joe、join、look、mtype、pico、rgrep、sed、sort、spell、tr、uniq、vi、wc</p><h3 id="网络通讯"><a href="#网络通讯" class="headerlink" title="网络通讯"></a>网络通讯</h3><p>dip、getty、mingetty、ppp-off、smbd(samba daemon)、telnet、uulog、uustat、uux、cu、dnsconf、efax、httpd、ip、ifconfig、mesg、minicom、nc、netconf、netconfig、netstat、ping、pppstats、samba、setserial、shapecfg(shaper configuration)、smbd(samba daemon)、statserial(status ofserial port)、talk、tcpdump、testparm(test parameter)、traceroute、tty(teletypewriter)、uuname、wall(write all)、write、ytalk、arpwatch、apachectl、smbclient(samba client)、pppsetup</p><h3 id="设备管理"><a href="#设备管理" class="headerlink" title="设备管理"></a>设备管理</h3><p>dumpkeys、loadkeys、MAKEDEV、rdev、setleds</p><h3 id="电子邮件与新闻组"><a href="#电子邮件与新闻组" class="headerlink" title="电子邮件与新闻组"></a>电子邮件与新闻组</h3><p>archive、ctlinnd、elm、getlist、inncheck、mail、mailconf、mailq、messages、metamail、mutt、nntpget、pine、slrn、X WINDOWS SYSTEM、reconfig、startx(start X Window)、Xconfigurator、XF86Setup、xlsatoms、xlsclients、xlsfonts</p><h3 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h3><p>yes</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Ubuntu&amp;Github入门学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git和github初步学习</title>
      <link href="2020/10/21/git%E5%92%8Cgithub%E5%88%9D%E6%AD%A5%E5%AD%A6%E4%B9%A0/"/>
      <url>2020/10/21/git%E5%92%8Cgithub%E5%88%9D%E6%AD%A5%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>本文旨在给第一次使用 git 和 github 的同学提供快速的学习指引，分享我在学习中用到的资源及我对每一个步骤的个人理解。本文基于 Ubuntu 18.04 LTS 系统环境安装git。这是我的第一篇博文，给自己打气！思远  Fighting ！</p><h1 id="Git入门与实践"><a href="#Git入门与实践" class="headerlink" title="Git入门与实践"></a>Git入门与实践</h1><p><img src="https://camo.githubusercontent.com/13c4e50d88df7178ae1882a203ed57b641674f94/68747470733a2f2f63646e2e7261776769742e636f6d2f73696e647265736f726875732f617765736f6d652f643733303566333864323966656437386661383536353265336136336531353464643865383832392f6d656469612f62616467652e737667" alt="Awesome"></p><p>Git是分布式版本控制系统，简单来说，git将自动帮助开发者记录版本变动信息并直观呈现。</p><p>GitHub是用于版本控制和协作的代码托管平台，他支持开发者可以该平台共同处理研发项目。</p><p>git简明指南：<a href="https://www.runoob.com/manual/git-guide/"></a></p><h2 id="创建版本库及文件的添加"><a href="#创建版本库及文件的添加" class="headerlink" title="创建版本库及文件的添加"></a>创建版本库及文件的添加</h2><blockquote><p>版本库又名仓库，英文名 <strong>repository</strong>，可以简单理解成一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”。git 只能跟踪文本文件的改动，比如TXT文件，网页，所有的程序代码。</p></blockquote><ol><li><p>创建新文件夹，输入 <code>git init</code> 创建新版本库</p><pre class="line-numbers language-shell"><code class="language-shell">~$ cd /home/fangsiyuan/Documentscd fsygitgit initInitialized empty Git repository in /home/fangsiyuan/Documents/fsygit/.git/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code> git add</code> 添加文件至仓库，<code>git commit -m "代码提交信息"</code>  需要注意：所需添加的文件需在仓库目录里。</p><blockquote><p>你的本地仓库由 git 维护的三棵“树”组成。第一个是你的 <code>工作目录</code>，它持有实际文件；第二个是 <code>暂存区（Index）</code>，它像个缓存区域，临时保存你的改动；最后是 <code>HEAD</code>，它指向你最后一次提交的结果。</p></blockquote><p><img src="https://www.runoob.com/manual/git-guide/img/trees.png" alt="img"></p><p>执行  <code>commit</code>  系统提示 <code>*** Please tell me who you are.</code> 。这个错误是因为在创建git文件夹的时候信息不完善导致的，需执行以下命令：</p><pre class="line-numbers language-shell"><code class="language-shell">git config --global user.email "你的邮箱"git config --global user.name "你的名字"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h2 id="本地仓库连接远程仓库"><a href="#本地仓库连接远程仓库" class="headerlink" title="本地仓库连接远程仓库"></a>本地仓库连接远程仓库</h2><p>Git命令均是在本地执行，若想要开源则需要将数据放到其他开发人员能够连接的服务器上，我们选择Github作为远程仓库。</p><ol><li><p>首先 Git 与 Github 间由SSH加密传输，所以我们需要配置验证信息：</p><pre class="line-numbers language-shell"><code class="language-shell">$ ssh-keygen -t rsa -C "youremail@example.com"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p>复制在根目录下生成的**.ssh/id_rsa.pub** 文件里的<strong>key</strong>, 打开个人github里的<strong>Settings -&gt; SSH and GPG keys -&gt; New SSH key</strong>， 设置标题并将key粘贴。</p><ol start="2"><li>点击 <strong>create repository</strong> 按照指示新建个人仓库，创建完后如下图所示。</li></ol><p><img src="https://raw.githubusercontent.com/fanzidanzhidi/andetuchuang/master/typora-blog/20201021193818.png"></p><h2 id="提取、推送到远程仓库"><a href="#提取、推送到远程仓库" class="headerlink" title="提取、推送到远程仓库"></a>提取、推送到远程仓库</h2><p>我们已经使用add和commit指令更改了仓库，现在需要执行如下命令把改动提交到远端仓库：</p><pre class="line-numbers language-shell"><code class="language-shell">git push origin master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果你还没有克隆现有仓库。并且想要将仓库连接到某个远程服务器，你可以使用如下命令：</p><pre class="line-numbers language-shell"><code class="language-shell">git remote add origin <server><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Branch分支"><a href="#Branch分支" class="headerlink" title="Branch分支"></a>Branch分支</h2><blockquote><p>分支是用来将特性开发绝缘开来的。在你创建仓库的时候，<em>master</em> 是“默认的”分支。在其他分支上进行开发，完成后再将它们合并到主分支上。</p></blockquote><p>在我的理解里，正是分支的存在让一个不断迭代的应用或者仓库可以有序的、有迹可循的多人协作开发，不同的分支体现了不同版本的迭代过程且最后统一到master上。</p><p><img src="https://www.runoob.com/manual/git-guide/img/branches.png" alt="img"></p><p>通常在本地仓库可对分支进行以下指令操作：</p><pre class="line-numbers language-shell"><code class="language-shell">git checkout -b feature_x                   #创建叫feature_x的分支，并切换过去 git checkout master                         #切换回主分支（branch）git branch -d feature_x                     #删除叫feature_x的分支git push origin <branch>                    #将分支推送到远端仓库<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="推送改动"><a href="#推送改动" class="headerlink" title="推送改动"></a>推送改动</h2><p>当你在本地仓库对代码或文档进行了修改想要提交到远端的github仓库时，你需要用到如下语句：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> push origin master                     <span class="token comment" spellcheck="true">#可以把master替换成任何你想要推送的分支</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果你没有 <code>git clone</code>  某个仓库，并且想要将你的本地仓库连接到某个远程服务器，你可以使用如下命令添加：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> remote add origin <span class="token operator">&lt;</span>server<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="更新与合并"><a href="#更新与合并" class="headerlink" title="更新与合并"></a>更新与合并</h2><p><code>git pull</code>  执行后将会把你的远程仓库更新至最新改动，这个指令将同时（fetch、merge）远端的改动。</p><p><code>git merge &lt;branch&gt;</code>  执行后将合并其他分支到你的当前分支。</p>]]></content>
      
      
      <categories>
          
          <category> Ubuntu&amp;Github入门学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github同步文件时子仓库无法打开的解决方案</title>
      <link href="2020/10/19/github%E5%90%8C%E6%AD%A5%E6%97%B6%E5%AD%90%E4%BB%93%E5%BA%93%E6%97%A0%E6%B3%95%E6%89%93%E5%BC%80%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>2020/10/19/github%E5%90%8C%E6%AD%A5%E6%97%B6%E5%AD%90%E4%BB%93%E5%BA%93%E6%97%A0%E6%B3%95%E6%89%93%E5%BC%80%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<p>本文主要介绍在使用hexo+Ubuntu18.04LTS+github pages 制作个人blog方案时遇到的子文件夹无法打开的解决方案。</p><h2 id="Github同步文件时子仓库无法打开的解决方案"><a href="#Github同步文件时子仓库无法打开的解决方案" class="headerlink" title="Github同步文件时子仓库无法打开的解决方案"></a>Github同步文件时子仓库无法打开的解决方案</h2><h3 id="报错背景"><a href="#报错背景" class="headerlink" title="报错背景"></a>报错背景</h3><p>在使用<strong>hexo</strong>制作博客时尝尝需要使用别人自制的模版，于是乎我们要跑到人家的仓库里去clone或者fork到自己的博客仓库里，等我们兴高采烈的做完自己博客，想要同步 <strong>git add</strong> 到自己的仓库时，却发现themes里的那个主题文件夹上面有个小箭头，并且我们在github上打不开那个文件夹。</p><p><img src="https://raw.githubusercontent.com/fanzidanzhidi/andetuchuang/master/typora-blog/20201021193930.png"></p><p><img src="https://raw.githubusercontent.com/fanzidanzhidi/andetuchuang/master/typora-blog/20201021193956.png"></p><h3 id="报错原因"><a href="#报错原因" class="headerlink" title="报错原因"></a>报错原因</h3><blockquote><p>在 GitHub 上看到的将是一个灰色的图标，代表这是一个子模块，但是不知道这个子模块的仓库所在的 url，因此在 GitHub 上无法打开这个文件夹。</p></blockquote><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>Step1: cd到子文件夹所在目录，删除已经staged的文件，文件夹为无法打开的子仓库</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">rm</span> -r --cached <span class="token string">"文件夹的名称"</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Step2: 重新stage这个文件夹</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> add themes/文件夹的名称/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意： 最后一定要加 <code>/</code> ，表示加入这个文件夹而非作为子模块</p><p>Step3：重新git add、commit、push仓库至github</p>]]></content>
      
      
      <categories>
          
          <category> Ubuntu&amp;Github入门学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于hexo在ubuntu上构建个人博客</title>
      <link href="2020/10/19/%E5%9F%BA%E4%BA%8Ehexo%E5%9C%A8ubuntu%E4%B8%8A%E6%9E%84%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>2020/10/19/%E5%9F%BA%E4%BA%8Ehexo%E5%9C%A8ubuntu%E4%B8%8A%E6%9E%84%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>Github虽有readme提供导读，但终归不是个人博客的形式，因此我在思考如何将markdown语句写成的技术文档轻松地转换成方便阅读的Html格式，并搭建自己的技术金字塔博客。</p><h1 id="基于hexo在ubuntu上构建个人博客"><a href="#基于hexo在ubuntu上构建个人博客" class="headerlink" title="基于hexo在ubuntu上构建个人博客"></a>基于hexo在ubuntu上构建个人博客</h1><p><strong>hexo</strong> 是一个台湾的大学生写的静态网页框架，好用简单，因此本次选用 <strong>hexo</strong> 搭配 <strong>Github Pages</strong> 完成个人博客网站的制作。</p><h4 id="一-安装-hexo-及依赖组件"><a href="#一-安装-hexo-及依赖组件" class="headerlink" title="一. 安装 hexo 及依赖组件"></a>一. 安装 <strong>hexo</strong> 及依赖组件</h4><p>在使用 <strong>hexo</strong> 前需要确保Github个人账户已完成SSH密钥设定，且已按照之前博客完成了对于git的安装和学习，一切都准备就绪后咱们首先安装 <strong>npm</strong> 及 <strong>Node.js</strong> ：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> nodejs<span class="token function">sudo</span> apt <span class="token function">install</span> <span class="token function">npm</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>接着安装 <strong>hexo</strong>：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我在安装时报错，经查跟 <strong>npm</strong> 源有关, 于是我改用 <strong>cnpm</strong> 进行安装，并且使用管理员权限：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">npm</span> <span class="token function">install</span> -g cnpm --registry<span class="token operator">=</span>https://registry.npm.taobao.org<span class="token function">sudo</span> cnpm <span class="token function">install</span> hexo-cli -g<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="二-将hexo部署至Github"><a href="#二-将hexo部署至Github" class="headerlink" title="二. 将hexo部署至Github"></a>二. 将hexo部署至Github</h4><h4 id="使用picgo搭建图床"><a href="#使用picgo搭建图床" class="headerlink" title="使用picgo搭建图床"></a>使用picgo搭建图床</h4><p>部署完网页后，使用 <code>hexo clean hexo g hexo d </code>  三连生成远端博客。我发现用.md文件里用在线链接复制的图片都正常显示，而本地路径复制的图片都无法正常显示。经过学习，我发现解决方案都十分的复杂，还需要做很多复制操作。直到图床这个概念进入我的视线。</p><p><strong>图床能干啥？</strong></p><p>官方叫开源图片管理系统，民间理解就是个在网络上存储图片的地方，可以方便在你的博文里调用，加快图片打开速度。常见的图床如下所示：</p><img src="https://raw.githubusercontent.com/fanzidanzhidi/andetuchuang/master/typora-blog/20201022174155.png" style="zoom:100%;"><p><strong>PicGo能组撒</strong>？</p><p>PicGo一个用于快速上传图片并获取图片 URL 链接的工具。</p><p><img src="https://raw.githubusercontent.com/Molunerfinn/test/master/picgo/picgo-2.0.gif" alt="img"></p><p>也就是说他会实现shutter截图-复制到剪贴板-上传到图床-生成markdown支持的链接 一条龙服务。</p><p><strong>Gopic关联Typora实现复制即上传</strong></p><p>在typora偏好设置里更改成如下配置后即可实现复制到typora即同步上传到图床。</p><p><img src="https://raw.githubusercontent.com/fanzidanzhidi/andetuchuang/master/typora-blog/20201022192222.png"></p>]]></content>
      
      
      <categories>
          
          <category> Ubuntu&amp;Github入门学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2020/10/19/%E6%81%A2%E5%A4%8D%E8%AF%AF%E5%88%A0%E4%BB%93%E5%BA%93branch/"/>
      <url>2020/10/19/%E6%81%A2%E5%A4%8D%E8%AF%AF%E5%88%A0%E4%BB%93%E5%BA%93branch/</url>
      
        <content type="html"><![CDATA[<p>这篇文章的背景是基于我在初学git时想要整理我的hexo博客代码并同步合并到Github里。我失误的删除了用作备份的hexo分支，以至于所有的数据、写的md博文全都在本地和远程仓库里消失了。万幸git提供了recover的方式恢复之前删除的branch，那究竟如何操作呢？</p><h1 id="恢复误操作删掉的的git’s-Branch"><a href="#恢复误操作删掉的的git’s-Branch" class="headerlink" title="恢复误操作删掉的的git’s Branch"></a>恢复误操作删掉的的git’s Branch</h1><p>Step1：使用 <code>git log -g</code>  语句显示之前commit提交操作的日志记录，并复制你想恢复的那一版本的<code>commit_id</code> (commit 后那一长串字符）:</p><p><img src="https://raw.githubusercontent.com/fanzidanzhidi/andetuchuang/master/typora-blog/20201022142857.png"></p><p>Step2：使用 <code>git branch recover_branch_分支名 commit_id</code>  创建新分支。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> branch recover_branch_abc f617c76472e7d6c06703aa82c10a71e996c7aef2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这一步将会把你想要恢复的文件全都恢复到新分支</p><p>Step3：切换到新分支，检查文件是否存在</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> checkout recover_branch_abc                              <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以打开本地仓库检查你想要恢复的代码文档是否已经恢复。</p><p>Step0：（花絮）如何删除本地仓库和远程Github仓库的分支呢？</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> branch -D abc                                     <span class="token comment" spellcheck="true">#删除本地仓库分支abc</span><span class="token function">git</span> push origin --delete abc                          <span class="token comment" spellcheck="true">#删除远程仓库分支abc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>:happy: </p><p><span class="github-emoji"><span>🉑</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f251.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p>]]></content>
      
      
      <categories>
          
          <category> Ubuntu&amp;Github入门学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
